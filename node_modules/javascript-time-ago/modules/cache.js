import _typeof from 'babel-runtime/helpers/typeof';
import _getIterator from 'babel-runtime/core-js/get-iterator';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';

// A basic in-memory cache.
var Cache = function () {
	function Cache() {
		_classCallCheck(this, Cache);

		this.cache = {};
	}

	_createClass(Cache, [{
		key: 'get',
		value: function get() {
			var cache = this.cache;

			for (var _len = arguments.length, keys = Array(_len), _key = 0; _key < _len; _key++) {
				keys[_key] = arguments[_key];
			}

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = _getIterator(keys), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var key = _step.value;

					if ((typeof cache === 'undefined' ? 'undefined' : _typeof(cache)) !== 'object') {
						return;
					}
					cache = cache[key];
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			return cache;
		}
	}, {
		key: 'put',
		value: function put() {
			for (var _len2 = arguments.length, keys = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				keys[_key2] = arguments[_key2];
			}

			var value = keys.pop();
			var last_key = keys.pop();

			var cache = this.cache;
			var _iteratorNormalCompletion2 = true;
			var _didIteratorError2 = false;
			var _iteratorError2 = undefined;

			try {
				for (var _iterator2 = _getIterator(keys), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
					var key = _step2.value;

					if (_typeof(cache[key]) !== 'object') {
						cache[key] = {};
					}
					cache = cache[key];
				}
			} catch (err) {
				_didIteratorError2 = true;
				_iteratorError2 = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion2 && _iterator2.return) {
						_iterator2.return();
					}
				} finally {
					if (_didIteratorError2) {
						throw _iteratorError2;
					}
				}
			}

			return cache[last_key] = value;
		}
	}]);

	return Cache;
}();

export default Cache;
//# sourceMappingURL=cache.js.map